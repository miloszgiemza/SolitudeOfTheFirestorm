//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.14.0
//     from Assets/MainInputAsset.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

/// <summary>
/// Provides programmatic access to <see cref="InputActionAsset" />, <see cref="InputActionMap" />, <see cref="InputAction" /> and <see cref="InputControlScheme" /> instances defined in asset "Assets/MainInputAsset.inputactions".
/// </summary>
/// <remarks>
/// This class is source generated and any manual edits will be discarded if the associated asset is reimported or modified.
/// </remarks>
/// <example>
/// <code>
/// using namespace UnityEngine;
/// using UnityEngine.InputSystem;
///
/// // Example of using an InputActionMap named "Player" from a UnityEngine.MonoBehaviour implementing callback interface.
/// public class Example : MonoBehaviour, MyActions.IPlayerActions
/// {
///     private MyActions_Actions m_Actions;                  // Source code representation of asset.
///     private MyActions_Actions.PlayerActions m_Player;     // Source code representation of action map.
///
///     void Awake()
///     {
///         m_Actions = new MyActions_Actions();              // Create asset object.
///         m_Player = m_Actions.Player;                      // Extract action map object.
///         m_Player.AddCallbacks(this);                      // Register callback interface IPlayerActions.
///     }
///
///     void OnDestroy()
///     {
///         m_Actions.Dispose();                              // Destroy asset object.
///     }
///
///     void OnEnable()
///     {
///         m_Player.Enable();                                // Enable all actions within map.
///     }
///
///     void OnDisable()
///     {
///         m_Player.Disable();                               // Disable all actions within map.
///     }
///
///     #region Interface implementation of MyActions.IPlayerActions
///
///     // Invoked when "Move" action is either started, performed or canceled.
///     public void OnMove(InputAction.CallbackContext context)
///     {
///         Debug.Log($"OnMove: {context.ReadValue&lt;Vector2&gt;()}");
///     }
///
///     // Invoked when "Attack" action is either started, performed or canceled.
///     public void OnAttack(InputAction.CallbackContext context)
///     {
///         Debug.Log($"OnAttack: {context.ReadValue&lt;float&gt;()}");
///     }
///
///     #endregion
/// }
/// </code>
/// </example>
public partial class @MainInputAssetWrapper: IInputActionCollection2, IDisposable
{
    /// <summary>
    /// Provides access to the underlying asset instance.
    /// </summary>
    public InputActionAsset asset { get; }

    /// <summary>
    /// Constructs a new instance.
    /// </summary>
    public @MainInputAssetWrapper()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""MainInputAsset"",
    ""maps"": [
        {
            ""name"": ""MobileDevicesMap"",
            ""id"": ""29a707c5-8791-494b-8288-c95c60226c37"",
            ""actions"": [
                {
                    ""name"": ""MainAction"",
                    ""type"": ""Button"",
                    ""id"": ""e168c317-fcb7-4e30-88c4-c1e11e798db3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MainActionPosition"",
                    ""type"": ""Value"",
                    ""id"": ""88bfba62-d48e-4def-9cb1-e9805d6978b4"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""EndTurnOrCancelAction"",
                    ""type"": ""Button"",
                    ""id"": ""5cfd7548-7ad8-4f44-a558-c9f1165c7ff1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Zoom"",
                    ""type"": ""Value"",
                    ""id"": ""ed6db86f-8fcd-4fa1-ac47-e9cfe03989c1"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""CameraMovement"",
                    ""type"": ""Value"",
                    ""id"": ""1fe9387f-a79b-470c-a6f3-45cdb5d6e5d5"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""SecondaryTouch"",
                    ""type"": ""Button"",
                    ""id"": ""eba8c401-60a4-415d-9680-e3b6a45592ca"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SecondaryTouchPosition"",
                    ""type"": ""Value"",
                    ""id"": ""c7d11cfc-20ce-44b0-91a4-401a1b66c64b"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""ac89d615-007f-4dfc-88dd-a7225152f49f"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MainAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""dcb0ba0a-c12b-4b72-aa9d-ac98c2511734"",
                    ""path"": ""<Touchscreen>/primaryTouch/press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MainAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""569f80f6-9a64-4ca1-b527-f732c5dd8ae1"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MainActionPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d47d622d-c575-43b2-b683-de479a1e87f2"",
                    ""path"": ""<Touchscreen>/primaryTouch/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MainActionPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d6e9746d-1612-4e28-87d2-f94191f820c2"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""EndTurnOrCancelAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3fa881f3-5f37-4744-86b3-f08eb06cade0"",
                    ""path"": ""<Mouse>/scroll/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Zoom"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""WASD"",
                    ""id"": ""7c8bf3bc-5970-4730-aaa8-66fdfd195c33"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CameraMovement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Up"",
                    ""id"": ""dc7fa237-854f-4a2d-9c19-5517631e0a81"",
                    ""path"": ""<Keyboard>/#(W)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CameraMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Down"",
                    ""id"": ""695607c4-f655-484c-8406-eef6c75d3645"",
                    ""path"": ""<Keyboard>/#(S)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CameraMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Left"",
                    ""id"": ""78f223f1-822d-4c0a-8820-280122578ef3"",
                    ""path"": ""<Keyboard>/#(A)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CameraMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Right"",
                    ""id"": ""317d4487-6230-4009-816f-44c075b7c859"",
                    ""path"": ""<Keyboard>/#(D)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CameraMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Arrows"",
                    ""id"": ""6db181f5-6a2d-416d-bbdb-bef7189bd2c1"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CameraMovement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Up"",
                    ""id"": ""9487ba18-d236-401a-a7ce-69fc13dacc2b"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CameraMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Down"",
                    ""id"": ""bb83e994-36db-4bf5-b1e4-97033bac81e4"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CameraMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Left"",
                    ""id"": ""f818d349-04a7-4429-97ba-b09979b0349a"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CameraMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Right"",
                    ""id"": ""c3d5d0cd-bc42-47e7-8489-75863066ebd5"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CameraMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""7e2f6c36-458a-4248-ae28-cc3414e51838"",
                    ""path"": ""<Touchscreen>/touch1/press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SecondaryTouch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bc121c96-017d-4cfa-8a47-80c237d39c0b"",
                    ""path"": ""<Touchscreen>/touch1/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SecondaryTouchPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // MobileDevicesMap
        m_MobileDevicesMap = asset.FindActionMap("MobileDevicesMap", throwIfNotFound: true);
        m_MobileDevicesMap_MainAction = m_MobileDevicesMap.FindAction("MainAction", throwIfNotFound: true);
        m_MobileDevicesMap_MainActionPosition = m_MobileDevicesMap.FindAction("MainActionPosition", throwIfNotFound: true);
        m_MobileDevicesMap_EndTurnOrCancelAction = m_MobileDevicesMap.FindAction("EndTurnOrCancelAction", throwIfNotFound: true);
        m_MobileDevicesMap_Zoom = m_MobileDevicesMap.FindAction("Zoom", throwIfNotFound: true);
        m_MobileDevicesMap_CameraMovement = m_MobileDevicesMap.FindAction("CameraMovement", throwIfNotFound: true);
        m_MobileDevicesMap_SecondaryTouch = m_MobileDevicesMap.FindAction("SecondaryTouch", throwIfNotFound: true);
        m_MobileDevicesMap_SecondaryTouchPosition = m_MobileDevicesMap.FindAction("SecondaryTouchPosition", throwIfNotFound: true);
    }

    ~@MainInputAssetWrapper()
    {
        UnityEngine.Debug.Assert(!m_MobileDevicesMap.enabled, "This will cause a leak and performance issues, MainInputAssetWrapper.MobileDevicesMap.Disable() has not been called.");
    }

    /// <summary>
    /// Destroys this asset and all associated <see cref="InputAction"/> instances.
    /// </summary>
    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.bindingMask" />
    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.devices" />
    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.controlSchemes" />
    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Contains(InputAction)" />
    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.GetEnumerator()" />
    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    /// <inheritdoc cref="IEnumerable.GetEnumerator()" />
    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Enable()" />
    public void Enable()
    {
        asset.Enable();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Disable()" />
    public void Disable()
    {
        asset.Disable();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.bindings" />
    public IEnumerable<InputBinding> bindings => asset.bindings;

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.FindAction(string, bool)" />
    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.FindBinding(InputBinding, out InputAction)" />
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // MobileDevicesMap
    private readonly InputActionMap m_MobileDevicesMap;
    private List<IMobileDevicesMapActions> m_MobileDevicesMapActionsCallbackInterfaces = new List<IMobileDevicesMapActions>();
    private readonly InputAction m_MobileDevicesMap_MainAction;
    private readonly InputAction m_MobileDevicesMap_MainActionPosition;
    private readonly InputAction m_MobileDevicesMap_EndTurnOrCancelAction;
    private readonly InputAction m_MobileDevicesMap_Zoom;
    private readonly InputAction m_MobileDevicesMap_CameraMovement;
    private readonly InputAction m_MobileDevicesMap_SecondaryTouch;
    private readonly InputAction m_MobileDevicesMap_SecondaryTouchPosition;
    /// <summary>
    /// Provides access to input actions defined in input action map "MobileDevicesMap".
    /// </summary>
    public struct MobileDevicesMapActions
    {
        private @MainInputAssetWrapper m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public MobileDevicesMapActions(@MainInputAssetWrapper wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "MobileDevicesMap/MainAction".
        /// </summary>
        public InputAction @MainAction => m_Wrapper.m_MobileDevicesMap_MainAction;
        /// <summary>
        /// Provides access to the underlying input action "MobileDevicesMap/MainActionPosition".
        /// </summary>
        public InputAction @MainActionPosition => m_Wrapper.m_MobileDevicesMap_MainActionPosition;
        /// <summary>
        /// Provides access to the underlying input action "MobileDevicesMap/EndTurnOrCancelAction".
        /// </summary>
        public InputAction @EndTurnOrCancelAction => m_Wrapper.m_MobileDevicesMap_EndTurnOrCancelAction;
        /// <summary>
        /// Provides access to the underlying input action "MobileDevicesMap/Zoom".
        /// </summary>
        public InputAction @Zoom => m_Wrapper.m_MobileDevicesMap_Zoom;
        /// <summary>
        /// Provides access to the underlying input action "MobileDevicesMap/CameraMovement".
        /// </summary>
        public InputAction @CameraMovement => m_Wrapper.m_MobileDevicesMap_CameraMovement;
        /// <summary>
        /// Provides access to the underlying input action "MobileDevicesMap/SecondaryTouch".
        /// </summary>
        public InputAction @SecondaryTouch => m_Wrapper.m_MobileDevicesMap_SecondaryTouch;
        /// <summary>
        /// Provides access to the underlying input action "MobileDevicesMap/SecondaryTouchPosition".
        /// </summary>
        public InputAction @SecondaryTouchPosition => m_Wrapper.m_MobileDevicesMap_SecondaryTouchPosition;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m_MobileDevicesMap; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="MobileDevicesMapActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(MobileDevicesMapActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="MobileDevicesMapActions" />
        public void AddCallbacks(IMobileDevicesMapActions instance)
        {
            if (instance == null || m_Wrapper.m_MobileDevicesMapActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MobileDevicesMapActionsCallbackInterfaces.Add(instance);
            @MainAction.started += instance.OnMainAction;
            @MainAction.performed += instance.OnMainAction;
            @MainAction.canceled += instance.OnMainAction;
            @MainActionPosition.started += instance.OnMainActionPosition;
            @MainActionPosition.performed += instance.OnMainActionPosition;
            @MainActionPosition.canceled += instance.OnMainActionPosition;
            @EndTurnOrCancelAction.started += instance.OnEndTurnOrCancelAction;
            @EndTurnOrCancelAction.performed += instance.OnEndTurnOrCancelAction;
            @EndTurnOrCancelAction.canceled += instance.OnEndTurnOrCancelAction;
            @Zoom.started += instance.OnZoom;
            @Zoom.performed += instance.OnZoom;
            @Zoom.canceled += instance.OnZoom;
            @CameraMovement.started += instance.OnCameraMovement;
            @CameraMovement.performed += instance.OnCameraMovement;
            @CameraMovement.canceled += instance.OnCameraMovement;
            @SecondaryTouch.started += instance.OnSecondaryTouch;
            @SecondaryTouch.performed += instance.OnSecondaryTouch;
            @SecondaryTouch.canceled += instance.OnSecondaryTouch;
            @SecondaryTouchPosition.started += instance.OnSecondaryTouchPosition;
            @SecondaryTouchPosition.performed += instance.OnSecondaryTouchPosition;
            @SecondaryTouchPosition.canceled += instance.OnSecondaryTouchPosition;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="MobileDevicesMapActions" />
        private void UnregisterCallbacks(IMobileDevicesMapActions instance)
        {
            @MainAction.started -= instance.OnMainAction;
            @MainAction.performed -= instance.OnMainAction;
            @MainAction.canceled -= instance.OnMainAction;
            @MainActionPosition.started -= instance.OnMainActionPosition;
            @MainActionPosition.performed -= instance.OnMainActionPosition;
            @MainActionPosition.canceled -= instance.OnMainActionPosition;
            @EndTurnOrCancelAction.started -= instance.OnEndTurnOrCancelAction;
            @EndTurnOrCancelAction.performed -= instance.OnEndTurnOrCancelAction;
            @EndTurnOrCancelAction.canceled -= instance.OnEndTurnOrCancelAction;
            @Zoom.started -= instance.OnZoom;
            @Zoom.performed -= instance.OnZoom;
            @Zoom.canceled -= instance.OnZoom;
            @CameraMovement.started -= instance.OnCameraMovement;
            @CameraMovement.performed -= instance.OnCameraMovement;
            @CameraMovement.canceled -= instance.OnCameraMovement;
            @SecondaryTouch.started -= instance.OnSecondaryTouch;
            @SecondaryTouch.performed -= instance.OnSecondaryTouch;
            @SecondaryTouch.canceled -= instance.OnSecondaryTouch;
            @SecondaryTouchPosition.started -= instance.OnSecondaryTouchPosition;
            @SecondaryTouchPosition.performed -= instance.OnSecondaryTouchPosition;
            @SecondaryTouchPosition.canceled -= instance.OnSecondaryTouchPosition;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="MobileDevicesMapActions.UnregisterCallbacks(IMobileDevicesMapActions)" />.
        /// </summary>
        /// <seealso cref="MobileDevicesMapActions.UnregisterCallbacks(IMobileDevicesMapActions)" />
        public void RemoveCallbacks(IMobileDevicesMapActions instance)
        {
            if (m_Wrapper.m_MobileDevicesMapActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="MobileDevicesMapActions.AddCallbacks(IMobileDevicesMapActions)" />
        /// <seealso cref="MobileDevicesMapActions.RemoveCallbacks(IMobileDevicesMapActions)" />
        /// <seealso cref="MobileDevicesMapActions.UnregisterCallbacks(IMobileDevicesMapActions)" />
        public void SetCallbacks(IMobileDevicesMapActions instance)
        {
            foreach (var item in m_Wrapper.m_MobileDevicesMapActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MobileDevicesMapActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="MobileDevicesMapActions" /> instance referencing this action map.
    /// </summary>
    public MobileDevicesMapActions @MobileDevicesMap => new MobileDevicesMapActions(this);
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "MobileDevicesMap" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="MobileDevicesMapActions.AddCallbacks(IMobileDevicesMapActions)" />
    /// <seealso cref="MobileDevicesMapActions.RemoveCallbacks(IMobileDevicesMapActions)" />
    public interface IMobileDevicesMapActions
    {
        /// <summary>
        /// Method invoked when associated input action "MainAction" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnMainAction(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "MainActionPosition" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnMainActionPosition(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "EndTurnOrCancelAction" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnEndTurnOrCancelAction(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Zoom" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnZoom(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "CameraMovement" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnCameraMovement(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "SecondaryTouch" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnSecondaryTouch(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "SecondaryTouchPosition" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnSecondaryTouchPosition(InputAction.CallbackContext context);
    }
}
